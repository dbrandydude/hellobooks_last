{"version":3,"sources":["../../server/controllers/user.js"],"names":["UsersController","signup","req","res","checkBody","notEmpty","isLength","min","isEmail","getValidationResult","then","result","isEmpty","status","json","data","array","newUser","username","body","password","hashSync","email","fullname","firstname","lastname","User","create","user","catch","send","err","login","next","authenticate","logout"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,kBAAkB;AACpB;AACAC,YAAQ,gBAACC,GAAD,EAAMC,GAAN,EAAc;AAClB;AACAD,YAAIE,SAAJ,CAAc,UAAd,EAA0B,kBAA1B,EAA8CC,QAA9C;AACAH,YAAIE,SAAJ,CAAc,UAAd,EAA0B,kBAA1B,EACKC,QADL,GACgBC,QADhB,CACyB,EAAEC,KAAK,CAAP,EADzB;AAEAL,YAAIE,SAAJ,CAAc,OAAd,EAAuB,eAAvB,EAAwCC,QAAxC,GAAmDG,OAAnD;AACAN,YAAIE,SAAJ,CAAc,WAAd,EAA2B,2BAA3B,EACKC,QADL,GACgBC,QADhB,CACyB,EAAEC,KAAK,CAAP,EADzB;AAEAL,YAAIE,SAAJ,CAAc,UAAd,EAA0B,0BAA1B,EACKC,QADL,GACgBC,QADhB,CACyB,EAAEC,KAAK,CAAP,EADzB;;AAGA;AACAL,YAAIO,mBAAJ,GAA0BC,IAA1B,CAA+B,UAACC,MAAD,EAAY;AACvC,gBAAI,CAACA,OAAOC,OAAP,EAAL,EAAuB;AACnB,uBAAOT,IAAIU,MAAJ,CAAW,GAAX,EACFC,IADE,CACG,EAAED,QAAQ,kBAAV,EAA8BE,MAAMJ,OAAOK,KAAP,EAApC,EADH,CAAP;AAEH;;AAED,gBAAMC,UAAU;AACZC,0BAAUhB,IAAIiB,IAAJ,CAASD,QADP;AAEZE,0BAAU,mBAAOC,QAAP,CAAgBnB,IAAIiB,IAAJ,CAASC,QAAzB,EAAmC,CAAnC,CAFE;AAGZE,uBAAOpB,IAAIiB,IAAJ,CAASG,KAHJ;AAIZC,0BAAarB,IAAIiB,IAAJ,CAASK,SAAtB,SAAmCtB,IAAIiB,IAAJ,CAASM;AAJhC,aAAhB;;AAOA,6BAAGC,IAAH,CACKC,MADL,CACYV,OADZ,EAEKP,IAFL,CAEU;AAAA,uBAAQP,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBc,IAArB,CAAR;AAAA,aAFV,EAGKC,KAHL,CAGW;AAAA,uBAAO1B,IAAIU,MAAJ,CAAW,GAAX,EAAgBiB,IAAhB,CAAqBC,GAArB,CAAP;AAAA,aAHX;AAIH,SAjBD;AAkBH,KAhCmB;;AAkCpB;AACAC,WAAO,eAAC9B,GAAD,EAAMC,GAAN,EAAW8B,IAAX,EAAoB;AACvB,2BAASC,YAAT,CAAsB,OAAtB,EAA+B,UAACH,GAAD,EAAMH,IAAN,EAAe;AAC1C,gBAAIG,GAAJ,EAAS,OAAOE,KAAKF,GAAL,CAAP;AACT,gBAAI,CAACH,IAAL,EAAW;AACP,uBAAOzB,IAAIU,MAAJ,CAAW,GAAX,EAAgBiB,IAAhB,CAAqB;AACxBjB,4BAAQ;AADgB,iBAArB,CAAP;AAGH;AACDX,gBAAI8B,KAAJ,CAAUJ,IAAV,EAAgB,UAACG,GAAD,EAAS;AACrB,oBAAIA,GAAJ,EAAS,OAAOE,KAAKF,GAAL,CAAP;AACT,uBAAO5B,IAAIU,MAAJ,CAAW,GAAX,EAAgBiB,IAAhB,CAAqBF,IAArB,CAAP;AACH,aAHD;AAIH,SAXD,EAWG1B,GAXH,EAWQC,GAXR,EAWa8B,IAXb;AAYH,KAhDmB;;AAkDpB;AACAE,YAAQ,gBAACjC,GAAD,EAAMC,GAAN,EAAc;AAClBD,YAAIiC,MAAJ;AACAhC,YAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAED,QAAQ,YAAV,EAArB;AACH;AAtDmB,CAAxB;;kBAyDeb,e","file":"user.js","sourcesContent":["import bcrypt from 'bcryptjs';\r\nimport passport from 'passport';\r\n\r\nimport db from '../models';\r\n\r\nconst UsersController = {\r\n    /* Register / create user account */\r\n    signup: (req, res) => {\r\n        // Validate input\r\n        req.checkBody('username', 'Invalid username').notEmpty();\r\n        req.checkBody('password', 'Invalid password')\r\n            .notEmpty().isLength({ min: 5 });\r\n        req.checkBody('email', 'Invalid email').notEmpty().isEmail();\r\n        req.checkBody('firstname', 'Invalid entry - Firstname')\r\n            .notEmpty().isLength({ min: 2 });\r\n        req.checkBody('lastname', 'Invalid entry - Lastname')\r\n            .notEmpty().isLength({ min: 2 });\r\n\r\n        // Validation result\r\n        req.getValidationResult().then((result) => {\r\n            if (!result.isEmpty()) {\r\n                return res.status(400)\r\n                    .json({ status: 'Validation error', data: result.array() });\r\n            }\r\n\r\n            const newUser = {\r\n                username: req.body.username,\r\n                password: bcrypt.hashSync(req.body.password, 8),\r\n                email: req.body.email,\r\n                fullname: `${req.body.firstname} ${req.body.lastname}`\r\n            };\r\n\r\n            db.User\r\n                .create(newUser)\r\n                .then(user => res.status(201).json(user))\r\n                .catch(err => res.status(400).send(err));\r\n        });\r\n    },\r\n\r\n    /* Login user */\r\n    login: (req, res, next) => {\r\n        passport.authenticate('local', (err, user) => {\r\n            if (err) return next(err);\r\n            if (!user) {\r\n                return res.status(500).send({\r\n                    status: 'Invalid credentials'\r\n                });\r\n            }\r\n            req.login(user, (err) => {\r\n                if (err) return next(err);\r\n                return res.status(200).send(user);\r\n            });\r\n        })(req, res, next);\r\n    },\r\n\r\n    /* logout user */\r\n    logout: (req, res) => {\r\n        req.logout();\r\n        res.status(200).json({ status: 'Logged out' });\r\n    }\r\n};\r\n\r\nexport default UsersController;\r\n"]}