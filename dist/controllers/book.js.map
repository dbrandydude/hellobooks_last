{"version":3,"sources":["../../server/controllers/book.js"],"names":["BooksController","add","req","res","checkBody","notEmpty","isInt","getValidationResult","then","result","isEmpty","status","json","data","array","newBook","isbn","body","title","author","published","description","qty","Book","create","book","catch","err","send","update","bookId","params","findById","updateBook","retrieveAll","all","books","retrieve","parseInt","borrow","userId","bookData","Inventory","inventory","return","findOne","where","query","returned","findAll"],"mappings":"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","file":"book.js","sourcesContent":["import db from '../models';\r\n\r\nconst BooksController = {\r\n    /* Add Book */\r\n    add: (req, res) => {\r\n        // Validate input\r\n        req.checkBody('isbn', 'ISBN required').notEmpty().isInt();\r\n        req.checkBody('title', 'Title required').notEmpty();\r\n        req.checkBody('author', 'Author required').notEmpty();\r\n        req.checkBody('published', 'Published date required').notEmpty();\r\n        req.checkBody('description', 'Description required').notEmpty();\r\n        req.checkBody('qty', 'QTY required').notEmpty().isInt();\r\n\r\n        // Validation result\r\n        req.getValidationResult().then((result) => {\r\n            if (!result.isEmpty()) {\r\n                res.status(400)\r\n                    .json({ status: 'Validation error', data: result.array() });\r\n            }\r\n\r\n            const newBook = {\r\n                isbn: req.body.isbn,\r\n                title: req.body.title,\r\n                author: req.body.author,\r\n                published: req.body.published,\r\n                description: req.body.description,\r\n                qty: req.body.qty\r\n            };\r\n\r\n            db.Book\r\n                .create(newBook)\r\n                .then((book) => {\r\n                    res.status(201).json({\r\n                        status: 'success',\r\n                        data: book\r\n                    });\r\n                })\r\n                .catch((err) => { res.status(400).send(err); });\r\n        });\r\n    },\r\n\r\n    /* Update book */\r\n    update: (req, res) => {\r\n        const bookId = req.params.bookId;\r\n\r\n        db.Book\r\n            .findById(bookId)\r\n            .then((book) => {\r\n                if (!book) {\r\n                    res.status(404).send({\r\n                        status: 'Not found'\r\n                    });\r\n                }\r\n\r\n                const updateBook = {\r\n                    isbn: req.body.isbn || book.isbn,\r\n                    title: req.body.title || book.title,\r\n                    author: req.body.author || book.author,\r\n                    published: req.body.published || book.published,\r\n                    description: req.body.description || book.description,\r\n                    qty: req.body.qty || book.isbn\r\n                };\r\n                return book\r\n                    .update(updateBook)\r\n                    .then(() => {\r\n                        res.status(200).send({ status: 'success' });\r\n                    })\r\n                    .catch(err => res.status(400).send(err));\r\n            });\r\n    },\r\n\r\n    /* Retrieve all books */\r\n    retrieveAll: (req, res) => {\r\n        db.Book.all()\r\n            .then((books) => { res.send(books); })\r\n            .catch((err) => { res.send(err); });\r\n    },\r\n\r\n    /* Retrieve single book */\r\n    retrieve: (req, res) => {\r\n        const bookId = parseInt(req.params.bookId, 10);\r\n        db.Book\r\n            .findById(bookId)\r\n            .then((book) => {\r\n                if (!book) return res.status(404).send('Not found');\r\n                res.status(200).send(book);\r\n            })\r\n            .catch((err) => { res.status(400).send(err); });\r\n    },\r\n\r\n    /* Borrow book */\r\n    borrow: (req, res) => {\r\n        const userId = parseInt(req.params.userId, 10);\r\n        const bookId = req.body.bookId;\r\n\r\n        db.Book\r\n            .findById(bookId)\r\n            .then((book) => {\r\n                // TODO: associate\r\n                const bookData = book.title;\r\n                db.Inventory\r\n                    .create({\r\n                        userId,\r\n                        book: bookData\r\n                    })\r\n                    .then((inventory) => {\r\n                        res.status(200).send(inventory);\r\n                    });\r\n            })\r\n            .catch(err => res.status(400).send(err));\r\n    },\r\n\r\n    /* Return borrowed books */\r\n    return: (req, res) => {\r\n        const bookId = parseInt(req.body.bookId, 10);\r\n        db.Inventory\r\n            .findOne({ where: { bookId } })\r\n            .then((book) => {\r\n                if (!book) {\r\n                    res.status(404).send({ status: 'Not found' });\r\n                }\r\n                book\r\n                    .update({ return: true })\r\n                    .then(() => {\r\n                        res.status(200).send({ status: 'success' });\r\n                    })\r\n                    .catch(err => res.status(400).send(err));\r\n            });\r\n    },\r\n\r\n    /* Get books borrowed by user */\r\n    inventory: (req, res) => {\r\n        if (req.query.returned) {\r\n            return db.Inventory\r\n                .findAll({\r\n                    where: {\r\n                        userId: req.params.userId,\r\n                        return: req.query.returned\r\n                    }\r\n                })\r\n                .then((books) => { res.send(books); })\r\n                .catch((err) => { res.send(err); });\r\n        }\r\n        db.Inventory\r\n            .findAll({ where: { userId: req.params.userId } })\r\n            .then((books) => { res.send(books); })\r\n            .catch((err) => { res.send(err); });\r\n    }\r\n};\r\n\r\nexport default BooksController;\r\n"]}