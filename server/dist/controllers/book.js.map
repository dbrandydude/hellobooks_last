{"version":3,"sources":["../../src/controllers/book.js"],"names":["BooksController","add","req","res","Book","create","isbn","body","title","author","published","description","qty","then","book","status","send","catch","err","retrieveAll","all","books","retrieve","bookId","parseInt","params","findById"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,kBAAkB;AACpB;AACAC,SAAK,aAACC,GAAD,EAAMC,GAAN,EAAc;AACf,yBAAGC,IAAH,CACKC,MADL,CACY;AACJC,kBAAMJ,IAAIK,IAAJ,CAASD,IADX;AAEJE,mBAAON,IAAIK,IAAJ,CAASC,KAFZ;AAGJC,oBAAQP,IAAIK,IAAJ,CAASE,MAHb;AAIJC,uBAAWR,IAAIK,IAAJ,CAASG,SAJhB;AAKJC,yBAAaT,IAAIK,IAAJ,CAASI,WALlB;AAMJC,iBAAKV,IAAIK,IAAJ,CAASK;AANV,SADZ,EASKC,IATL,CASU,UAACC,IAAD,EAAU;AAAEX,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,IAArB;AAA6B,SATnD,EAUKG,KAVL,CAUW,UAACC,GAAD,EAAS;AAAEf,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,GAArB;AAA4B,SAVlD;AAWH,KAdmB;;AAgBpB;AACAC,iBAAa,qBAACjB,GAAD,EAAMC,GAAN,EAAc;AACvB,yBAAGC,IAAH,CACKgB,GADL,GAEKP,IAFL,CAEU,UAACQ,KAAD,EAAW;AAAElB,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBK,KAArB;AAA8B,SAFrD,EAGKJ,KAHL,CAGW,UAACC,GAAD,EAAS;AAAEf,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,GAArB;AAA4B,SAHlD;AAIH,KAtBmB;;AAwBpB;AACAI,cAAU,kBAACpB,GAAD,EAAMC,GAAN,EAAc;AACpB,YAAMoB,SAASC,SAAStB,IAAIuB,MAAJ,CAAWF,MAApB,EAA4B,EAA5B,CAAf;AACA,yBAAGnB,IAAH,CACKsB,QADL,CACcH,MADd,EAEKV,IAFL,CAEU,UAACC,IAAD,EAAU;AAAEX,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,IAArB;AAA6B,SAFnD,EAGKG,KAHL,CAGW,UAACC,GAAD,EAAS;AAAEf,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,GAArB;AAA4B,SAHlD;AAIH;;AA/BmB,CAAxB;;kBAmCelB,e","file":"book.js","sourcesContent":["import db from '../models';\r\n\r\nconst BooksController = {\r\n    /* Add Book */\r\n    add: (req, res) => {\r\n        db.Book\r\n            .create({\r\n                isbn: req.body.isbn,\r\n                title: req.body.title,\r\n                author: req.body.author,\r\n                published: req.body.published,\r\n                description: req.body.description,\r\n                qty: req.body.qty\r\n            })\r\n            .then((book) => { res.status(201).send(book); })\r\n            .catch((err) => { res.status(400).send(err); });\r\n    },\r\n\r\n    /* Retrieve all books */\r\n    retrieveAll: (req, res) => {\r\n        db.Book\r\n            .all()\r\n            .then((books) => { res.status(200).send(books); })\r\n            .catch((err) => { res.status(400).send(err); });\r\n    },\r\n\r\n    /* Retrieve single book */\r\n    retrieve: (req, res) => {\r\n        const bookId = parseInt(req.params.bookId, 10);\r\n        db.Book\r\n            .findById(bookId)\r\n            .then((book) => { res.status(200).send(book); })\r\n            .catch((err) => { res.status(400).send(err); });\r\n    }\r\n\r\n};\r\n\r\nexport default BooksController;\r\n"]}