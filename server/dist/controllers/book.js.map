{"version":3,"sources":["../../src/controllers/book.js"],"names":["BooksController","add","req","res","Book","create","isbn","body","title","author","published","description","qty","then","book","status","send","catch","err","update","bookId","params","updateBook","findById","retrieveAll","all","books","retrieve","parseInt"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,kBAAkB;AACpB;AACAC,SAAK,aAACC,GAAD,EAAMC,GAAN,EAAc;AACf,yBAAGC,IAAH,CACKC,MADL,CACY;AACJC,kBAAMJ,IAAIK,IAAJ,CAASD,IADX;AAEJE,mBAAON,IAAIK,IAAJ,CAASC,KAFZ;AAGJC,oBAAQP,IAAIK,IAAJ,CAASE,MAHb;AAIJC,uBAAWR,IAAIK,IAAJ,CAASG,SAJhB;AAKJC,yBAAaT,IAAIK,IAAJ,CAASI,WALlB;AAMJC,iBAAKV,IAAIK,IAAJ,CAASK;AANV,SADZ,EASKC,IATL,CASU,UAACC,IAAD,EAAU;AAAEX,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,IAArB;AAA6B,SATnD,EAUKG,KAVL,CAUW,UAACC,GAAD,EAAS;AAAEf,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,GAArB;AAA4B,SAVlD;AAWH,KAdmB;;AAgBpB;AACAC,YAAQ,gBAACjB,GAAD,EAAMC,GAAN,EAAc;AAClB,YAAMiB,SAASlB,IAAImB,MAAJ,CAAWD,MAA1B;AACA,YAAME,aAAa;AACfhB,kBAAMJ,IAAIK,IAAJ,CAASD,IADA;AAEfE,mBAAON,IAAIK,IAAJ,CAASC,KAFD;AAGfC,oBAAQP,IAAIK,IAAJ,CAASE,MAHF;AAIfC,uBAAWR,IAAIK,IAAJ,CAASG,SAJL;AAKfC,yBAAaT,IAAIK,IAAJ,CAASI,WALP;AAMfC,iBAAKV,IAAIK,IAAJ,CAASK;AANC,SAAnB;;AAUA,yBAAGR,IAAH,CACKmB,QADL,CACcH,MADd,EAEKP,IAFL,CAEU,UAACC,IAAD,EAAU;AACZ,gBAAI,CAACA,IAAL,EAAW;AACPX,oBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBD,4BAAQ;AADS,iBAArB;AAGH;AACD,mBAAOD,KACFK,MADE,CACKG,UADL,EAEFT,IAFE,CAEG,YAAM;AACRV,oBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAED,QAAQ,SAAV,EAArB;AACH,aAJE,EAKFE,KALE,CAKI;AAAA,uBAAOd,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,GAArB,CAAP;AAAA,aALJ,CAAP;AAMH,SAdL;AAeH,KA5CmB;;AA8CpB;AACAM,iBAAa,qBAACtB,GAAD,EAAMC,GAAN,EAAc;AACvB,yBAAGC,IAAH,CACKqB,GADL,GAEKZ,IAFL,CAEU,UAACa,KAAD,EAAW;AAAEvB,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBU,KAArB;AAA8B,SAFrD,EAGKT,KAHL,CAGW,UAACC,GAAD,EAAS;AAAEf,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,GAArB;AAA4B,SAHlD;AAIH,KApDmB;;AAsDpB;AACAS,cAAU,kBAACzB,GAAD,EAAMC,GAAN,EAAc;AACpB,YAAMiB,SAASQ,SAAS1B,IAAImB,MAAJ,CAAWD,MAApB,EAA4B,EAA5B,CAAf;AACA,yBAAGhB,IAAH,CACKmB,QADL,CACcH,MADd,EAEKP,IAFL,CAEU,UAACC,IAAD,EAAU;AAAEX,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,IAArB;AAA6B,SAFnD,EAGKG,KAHL,CAGW,UAACC,GAAD,EAAS;AAAEf,gBAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,GAArB;AAA4B,SAHlD;AAIH;;AA7DmB,CAAxB;;kBAiEelB,e","file":"book.js","sourcesContent":["import db from '../models';\r\n\r\nconst BooksController = {\r\n    /* Add Book */\r\n    add: (req, res) => {\r\n        db.Book\r\n            .create({\r\n                isbn: req.body.isbn,\r\n                title: req.body.title,\r\n                author: req.body.author,\r\n                published: req.body.published,\r\n                description: req.body.description,\r\n                qty: req.body.qty\r\n            })\r\n            .then((book) => { res.status(201).send(book); })\r\n            .catch((err) => { res.status(400).send(err); });\r\n    },\r\n\r\n    /* Update book */\r\n    update: (req, res) => {\r\n        const bookId = req.params.bookId;\r\n        const updateBook = {\r\n            isbn: req.body.isbn,\r\n            title: req.body.title,\r\n            author: req.body.author,\r\n            published: req.body.published,\r\n            description: req.body.description,\r\n            qty: req.body.qty\r\n        };\r\n\r\n\r\n        db.Book\r\n            .findById(bookId)\r\n            .then((book) => {\r\n                if (!book) {\r\n                    res.status(404).send({\r\n                        status: 'Not found'\r\n                    });\r\n                }\r\n                return book\r\n                    .update(updateBook)\r\n                    .then(() => {\r\n                        res.status(200).send({ status: 'success' });\r\n                    })\r\n                    .catch(err => res.status(400).send(err));\r\n            });\r\n    },\r\n\r\n    /* Retrieve all books */\r\n    retrieveAll: (req, res) => {\r\n        db.Book\r\n            .all()\r\n            .then((books) => { res.status(200).send(books); })\r\n            .catch((err) => { res.status(400).send(err); });\r\n    },\r\n\r\n    /* Retrieve single book */\r\n    retrieve: (req, res) => {\r\n        const bookId = parseInt(req.params.bookId, 10);\r\n        db.Book\r\n            .findById(bookId)\r\n            .then((book) => { res.status(200).send(book); })\r\n            .catch((err) => { res.status(400).send(err); });\r\n    }\r\n\r\n};\r\n\r\nexport default BooksController;\r\n"]}