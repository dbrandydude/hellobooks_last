{"version":3,"sources":["../../src/controllers/user.js"],"names":["UsersController","signup","req","res","User","create","username","body","password","hashSync","email","fullname","role","level","then","status","json","user","catch","send","err","login","next","authenticate","borrow","userId","parseInt","params","bookId","Book","findById","book","bookData","serialize","JSON","stringify","Inventory","inventory"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,kBAAkB;AACpB;AACAC,YAAQ,gBAACC,GAAD,EAAMC,GAAN,EAAc;AAClB,yBAAGC,IAAH,CACKC,MADL,CACY;AACJC,sBAAUJ,IAAIK,IAAJ,CAASD,QADf;AAEJE,sBAAU,mBAAOC,QAAP,CAAgBP,IAAIK,IAAJ,CAASC,QAAzB,EAAmC,CAAnC,CAFN;AAGJE,mBAAOR,IAAIK,IAAJ,CAASG,KAHZ;AAIJC,sBAAUT,IAAIK,IAAJ,CAASI,QAJf;AAKJC,kBAAMV,IAAIK,IAAJ,CAASK,IALX;AAMJC,mBAAOX,IAAIK,IAAJ,CAASM;AANZ,SADZ,EASKC,IATL,CASU;AAAA,mBAAQX,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,IAArB,CAAR;AAAA,SATV,EAUKC,KAVL,CAUW;AAAA,mBAAOf,IAAIY,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqBC,GAArB,CAAP;AAAA,SAVX;AAWH,KAdmB;;AAgBpB;AACAC,WAAO,eAACnB,GAAD,EAAMC,GAAN,EAAWmB,IAAX,EAAoB;AACvB,2BAASC,YAAT,CAAsB,OAAtB,EAA+B,UAACH,GAAD,EAAMH,IAAN,EAAe;AAC1C,gBAAIG,GAAJ,EAAS,OAAOE,KAAKF,GAAL,CAAP;AACT,gBAAI,CAACH,IAAL,EAAW;AACP,uBAAOd,IAAIY,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AACxBJ,4BAAQ;AADgB,iBAArB,CAAP;AAGH;AACDb,gBAAImB,KAAJ,CAAUJ,IAAV,EAAgB,UAACG,GAAD,EAAS;AACrB,oBAAIA,GAAJ,EAAS,OAAOE,KAAKF,GAAL,CAAP;AACT,uBAAOjB,IAAIY,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqBF,IAArB,CAAP;AACH,aAHD;AAIH,SAXD,EAWGf,GAXH,EAWQC,GAXR,EAWamB,IAXb;AAYH,KA9BmB;;AAgCpB;AACAE,YAAQ,gBAACtB,GAAD,EAAMC,GAAN,EAAc;AAClB,YAAI,CAACD,IAAIe,IAAT,EAAe,OAAOd,IAAIY,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB,cAArB,CAAP;AACf,YAAMM,SAASC,SAASxB,IAAIyB,MAAJ,CAAWF,MAApB,EAA4B,EAA5B,CAAf;AACA,YAAMG,SAAS1B,IAAIK,IAAJ,CAASqB,MAAxB;;AAEA,yBAAGC,IAAH,CACKC,QADL,CACcF,MADd,EAEKd,IAFL,CAEU,UAACiB,IAAD,EAAU;AACZ,gBAAMC,WAAW,qBAAGC,SAAH,CAAaC,KAAKC,SAAL,CAAeJ,IAAf,CAAb,CAAjB;AACA,6BAAGK,SAAH,CACK/B,MADL,CACY;AACJoB,8BADI;AAEJM,sBAAMC;AAFF,aADZ,EAKKlB,IALL,CAKU,UAACuB,SAAD,EAAe;AACjBlC,oBAAIY,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqBkB,SAArB;AACH,aAPL;AAQH,SAZL,EAaKnB,KAbL,CAaW;AAAA,mBAAOf,IAAIY,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqBC,GAArB,CAAP;AAAA,SAbX;AAcH;AApDmB,CAAxB;;kBAuDepB,e","file":"user.js","sourcesContent":["import bcrypt from 'bcryptjs';\r\nimport passport from 'passport';\r\nimport _s from 'serialijse';\r\n\r\nimport db from '../models';\r\n\r\nconst UsersController = {\r\n    /* Register / create user account */\r\n    signup: (req, res) => {\r\n        db.User\r\n            .create({\r\n                username: req.body.username,\r\n                password: bcrypt.hashSync(req.body.password, 8),\r\n                email: req.body.email,\r\n                fullname: req.body.fullname,\r\n                role: req.body.role,\r\n                level: req.body.level\r\n            })\r\n            .then(user => res.status(201).json(user))\r\n            .catch(err => res.status(400).send(err));\r\n    },\r\n\r\n    /* Login user */\r\n    login: (req, res, next) => {\r\n        passport.authenticate('local', (err, user) => {\r\n            if (err) return next(err);\r\n            if (!user) {\r\n                return res.status(500).send({\r\n                    status: 'Invalid credentials'\r\n                });\r\n            }\r\n            req.login(user, (err) => {\r\n                if (err) return next(err);\r\n                return res.status(200).send(user);\r\n            });\r\n        })(req, res, next);\r\n    },\r\n\r\n    /* Borrow book */\r\n    borrow: (req, res) => {\r\n        if (!req.user) return res.status(401).send('Unauthorized');\r\n        const userId = parseInt(req.params.userId, 10);\r\n        const bookId = req.body.bookId;\r\n\r\n        db.Book\r\n            .findById(bookId)\r\n            .then((book) => {\r\n                const bookData = _s.serialize(JSON.stringify(book));\r\n                db.Inventory\r\n                    .create({\r\n                        userId,\r\n                        book: bookData\r\n                    })\r\n                    .then((inventory) => {\r\n                        res.status(200).send(inventory);\r\n                    });\r\n            })\r\n            .catch(err => res.status(400).send(err));\r\n    }\r\n};\r\n\r\nexport default UsersController;\r\n"]}